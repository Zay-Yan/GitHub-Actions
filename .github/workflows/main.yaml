name: Solar System Workflow
on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'features/*'
env:
  MONGO_URI: 'mongodb://localhost:27017/superData'
  MONGO_USERNAME: ${{ vars.USERNAME }}
  MONGO_PASSWORD: ${{ secrets.PASSWORD }}  
jobs:
    unit-testing:
        name: NPM Testing
        runs-on: ubuntu-latest
        services:
          mongo-db:
            image: devopsprozy/mongo-db:latest
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: ${{ vars.USERNAME }}
          MONGO_PASSWORD: ${{ secrets.PASSWORD }}
        steps:
          - name: Download Repo
            uses: actions/checkout@v4
          - name: Setup NPM
            uses: actions/setup-node@v4
            with:
              node-version: 20
          - name: Install Dependencies
            run: npm install
          - name: Test Application
            run: npm test
          - name: Upload Test Results
            uses: actions/upload-artifact@v3
            with:
              name: Workflow-Result
              path: test-results.xml

    code-coverage:
      name: Checking Code Coverage
      runs-on: ubuntu-latest
      steps:
        - name: Download Repo
          uses: actions/checkout@v4
        - name: Setup NPM
          uses: actions/setup-node@v4
          with:
            node-version: 20
        - name: Install Dependencies
          run: npm install
        - name: Code Coverage
          continue-on-error: true
          run: npm run coverage
        - name: Upload Test Results
          uses: actions/upload-artifact@v3
          with:
            name: Workflow-Result
            path: results.xml
            retention-days: 5

    docker:
        name: Build and Push
        services:
          mongo-db:
            image: devopsprozy/mongo-db:latest
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: ${{ vars.USERNAME }}
          MONGO_PASSWORD: ${{ secrets.PASSWORD }}
        needs: [unit-testing,code-coverage]
        runs-on: ubuntu-latest
        steps:
        - name: Download Repo
          uses: actions/checkout@v4
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        -
          name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar:${{ github.sha }} 

        - name: Image Test
          run: | 
            docker run --name solar-testing -d \
             -p 3000:3000 \
             -e MONGO_URI=$MONGO_URI \
             -e MONGO_USERNAME=$MONGO_USERNAME \
             -e MONGO_PASSWORD=$MONGO_PASSWORD \
             ${{vars.DOCKERHUB_USERNAME}}/solar:${{github.sha}}

            export container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-testing)
            echo "$CONTAINER_IP"
            echo "Testing....................."
            wget -q -O - localhost:3000/live | grep live
   
    dev-deploy:
      name: Deploy Dev
      needs: docker
      continue-on-error: true
      runs-on: ubuntu-latest
      steps:
      - name: Download Repo
        uses: actions/checkout@v4
      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3
      - name: Configure kubeconfig file
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{secrets.KUBECONFIG}}
      - name: Get Cluster Info
        run: |
          kubectl version --short
          kubectl get nodes
      - name: Get ingress IP address from controller and use as variable
        run: |  
          echo "NGINX_IP=$(kubectl get svc -n ingress-nginx -o json | jq -r '.status.loadBalancer.ingress[0].ip') >> $GITHUB_ENV "
      - name: Get Cluster Info and Replace Token
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '{'
          tokenSuffix: '}'
          files: '[kubernetes/development/*.yaml]'
        env:
          NAMESPACE: $ {{ vars.NAMESPACE}}
          IMAGE: ${{vars.DOCKERHUB_USERNAME}}/solar:${{github.sha}} 
          REPLICAS: ${{ vars.REPLICAS}}
          INGRESS_IP: ${{env.NGINX_IP}}
      - name: Create MongoDB secret
        run: |
            kubectl create secret generic mongo-db-creds -n ${{vars.NAMESPACE}} \
            --from-literal=MONGO_URI=${{env.MONGO_URI}}  \  
            --from-literal=MONGO_URI=${{vars.MONGO_USERNAME}}  \ 
            --from-literal=MONGO_URI=${{secrets.MONGO_PASSWORD}}  \
            --save-config \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to Development Environment
        run: |
          kubectl apply -f kubernetes/development